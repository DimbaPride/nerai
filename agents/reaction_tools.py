"""
Ferramentas para rea√ß√µes a mensagens do WhatsApp.
"""

import logging
from typing import Dict, List, Any, Optional
import asyncio
from langchain.tools import BaseTool

from utils.smart_message_processor import send_reaction_to_message

logger = logging.getLogger(__name__)

# Mapeamento de descri√ß√µes para emojis de rea√ß√£o
REACTION_MAP = {
    # Positivas
    "curtir": "üëç",
    "like": "üëç",
    "gostar": "üëç", 
    "positivo": "üëç",
    "sim": "üëç",
    
    # Amor
    "cora√ß√£o": "‚ù§Ô∏è",
    "love": "‚ù§Ô∏è",
    "amar": "‚ù§Ô∏è",
    "adorar": "‚ù§Ô∏è",
    
    # Risada
    "rir": "üòÇ",
    "risada": "üòÇ",
    "engra√ßado": "üòÇ",
    "haha": "üòÇ",
    
    # Surpresa
    "surpresa": "üòÆ",
    "surpreso": "üòÆ",
    "uau": "üòÆ",
    "surpreender": "üòÆ",
    "espanto": "üòÆ",
    
    # Tristeza
    "triste": "üò¢",
    "tristeza": "üò¢",
    "chorar": "üò¢",
    "sad": "üò¢",
    
    # Gratid√£o
    "agradecer": "üôè",
    "obrigado": "üôè",
    "gratid√£o": "üôè",
    "thanks": "üôè",
    
    # Celebra√ß√£o
    "comemorar": "üéâ",
    "celebrar": "üéâ",
    "festa": "üéâ",
    "parab√©ns": "üéâ",
    
    # Outros
    "palmas": "üëè",
    "aplaudir": "üëè",
    "fogo": "üî•",
    "excelente": "üî•",
    "ok": "üëå",
    "perfeito": "üëå"
}

# Lista de todos os emojis suportados para rea√ß√µes
SUPPORTED_EMOJIS = [
    "üëç", "‚ù§Ô∏è", "üòÇ", "üòÆ", "üò¢", "üôè", "üéâ", "üëè", "üî•", "üëå"
]

class ReactionTool(BaseTool):
    """Ferramenta para reagir a mensagens via WhatsApp."""
    
    name: str = "send_reaction"
    description: str = "Reage a uma mensagem do cliente com um emoji"
    return_direct: bool = True
    
    def __init__(self):
        """Inicializa a ferramenta de rea√ß√£o."""
        super().__init__()
        self._whatsapp_number = None
        self._last_message_id = None
        
    def set_whatsapp_number(self, number: str) -> None:
        """Define o n√∫mero do WhatsApp para envio."""
        if not number:
            logger.error("Tentativa de configurar n√∫mero de WhatsApp vazio na ferramenta de rea√ß√£o")
            return
            
        old_number = self._whatsapp_number
        self._whatsapp_number = number
        logger.info(f"N√∫mero de WhatsApp configurado na ferramenta de rea√ß√£o: '{number}' (anterior: '{old_number}')")
    
    def set_last_message_id(self, message_id: str) -> None:
        """Define o ID da √∫ltima mensagem recebida."""
        self._last_message_id = message_id
    
    def _run(self, reaction_type: str = None, emoji: str = None, message_id: str = None) -> str:
        """
        N√£o usar diretamente, usar o m√©todo async.
        
        Args:
            reaction_type: Tipo de rea√ß√£o em linguagem natural
            emoji: Emoji direto para rea√ß√£o
            message_id: ID da mensagem (opcional, usa a √∫ltima por padr√£o)
            
        Returns:
            Mensagem de sucesso ou erro
        """
        raise NotImplementedError("Use o m√©todo _arun")
    
    def _map_reaction_type(self, reaction_type: str) -> str:
        """
        Mapeia uma descri√ß√£o para o emoji correspondente.
        
        Args:
            reaction_type: Descri√ß√£o da rea√ß√£o
            
        Returns:
            Emoji correspondente ou None
        """
        if not reaction_type:
            return None
            
        # Normalizar o texto
        normalized = reaction_type.lower().strip()
        
        # Adicionar mapeamentos para varia√ß√µes da palavra "heart" e "cora√ß√£o"
        if "heart" in normalized or "cora√ß√£o" in normalized or "coracao" in normalized:
            return "‚ù§Ô∏è"
            
        # Verificar correspond√™ncia exata
        if normalized in REACTION_MAP:
            return REACTION_MAP[normalized]
            
        # Verificar correspond√™ncia parcial
        for term, emoji in REACTION_MAP.items():
            if term in normalized or normalized in term:
                return emoji
                
        # Casos especiais
        if "gost" in normalized or "curti" in normalized:
            return "üëç"
        if "ama" in normalized or "cora√ß" in normalized:
            return "‚ù§Ô∏è"
        
        # Padr√£o
        return "üëç"
    
    async def _arun(self, reaction_type: str = None, emoji: str = None, message_id: str = None, follow_up: str = None) -> str:
        """
        Reage a uma mensagem do cliente.
        
        Args:
            reaction_type: Tipo de rea√ß√£o em linguagem natural (ex: "curtir", "amar")
            emoji: Emoji direto para rea√ß√£o (ex: "üëç", "‚ù§Ô∏è")
            message_id: ID da mensagem (opcional, usa a √∫ltima por padr√£o)
            follow_up: Mensagem de texto para enviar ap√≥s a rea√ß√£o (opcional)
            
        Returns:
            String com a mensagem de follow-up se fornecida, ou espa√ßo em branco em caso de sucesso
        """
        try:
            # Verificar n√∫mero do WhatsApp
            if not self._whatsapp_number:
                logger.error("N√∫mero do WhatsApp n√£o configurado na ferramenta de rea√ß√£o")
                return "Erro: N√∫mero do WhatsApp n√£o configurado. Por favor, aguarde o cliente enviar uma mensagem primeiro."
                
            # Determinar qual mensagem reagir
            msg_id = message_id or self._last_message_id
            
            # Verificar se temos um ID de mensagem v√°lido
            if not msg_id:
                logger.error("ID da mensagem n√£o fornecido e n√£o h√° √∫ltimo ID armazenado")
                return "N√£o posso reagir agora. Aguarde o cliente enviar uma mensagem primeiro."
                
            # Validar formato do ID da mensagem - deve ser um ID v√°lido, n√£o um timestamp
            if ":" in str(msg_id) or "/" in str(msg_id):
                logger.error(f"Formato de ID de mensagem inv√°lido: '{msg_id}'")
                if not self._last_message_id or ":" in str(self._last_message_id) or "/" in str(self._last_message_id):
                    return "N√£o posso reagir a esta mensagem. Aguarde o cliente enviar uma nova mensagem."
                logger.info(f"Usando √∫ltimo ID v√°lido armazenado: {self._last_message_id}")
                msg_id = self._last_message_id
                
            # Determinar qual emoji usar
            reaction_emoji = None
            
            # Se forneceu emoji diretamente
            if emoji and emoji in SUPPORTED_EMOJIS:
                reaction_emoji = emoji
            
            # Se forneceu tipo de rea√ß√£o para mapear
            elif reaction_type:
                reaction_emoji = self._map_reaction_type(reaction_type)
            
            # Se n√£o encontrou nenhum emoji v√°lido
            if not reaction_emoji:
                logger.warning("Emoji n√£o reconhecido, usando 'üëç' como padr√£o")
                reaction_emoji = "üëç"
                
            # Logs detalhados antes de enviar
            logger.info(f"Reagindo √† mensagem {msg_id} com '{reaction_emoji}'")
            logger.info(f"Usando n√∫mero de WhatsApp: {self._whatsapp_number}")
            
            # Enviar a rea√ß√£o
            success = await send_reaction_to_message(msg_id, reaction_emoji, self._whatsapp_number)
            
            # Se tiver uma mensagem de follow-up, retorna ela
            if follow_up:
                logger.info(f"Retornando mensagem de follow-up ap√≥s rea√ß√£o: '{follow_up[:30]}...'")
                return follow_up.strip()
                
            if success:
                # Retornar espa√ßo em branco em vez de string vazia para evitar erro de resposta inv√°lida
                return " "
            else:
                return "Erro ao reagir √† mensagem. Tente novamente."
                
        except Exception as e:
            logger.error(f"Erro ao enviar rea√ß√£o: {e}")
            return f"Erro ao reagir √† mensagem: {str(e)}"

# Inst√¢ncia da ferramenta para exporta√ß√£o
reaction_tool = ReactionTool() 